import json
import re

from aiogram import Router, Bot, F 
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiocryptopay import AioCryptoPay, Networks
from datetime import datetime

from config import CRYPTO_PAY_API_TOKEN
from database import async_session
from keyboards import CreateInlineButtons, CreateInlineButtonsWithLinks
from table_users import * 
from table_user_images import *
from table_user_videos import * 
from table_user_gifs import * 
from table_user_descs import * 
from table_users_ads import *
from utils import *

router = Router()
crypto_client = AioCryptoPay(token=CRYPTO_PAY_API_TOKEN, network=Networks.MAIN_NET)


'''
@router.message(Command("join_premium"))
async def join_premium(message: Message):
    user_id = message.from_user.id 

    async with async_session() as session:
        await add_user_premium(db=session, user_id=user_id)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏!")

@router.message(Command("quit_premium"))
async def quit_premium(message: Message):
    user_id = message.from_user.id 

    async with async_session() as session:
        await delete_user_premium(db=session, user_id=user_id)

    await message.answer("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
'''
    

@router.message(Command("commands"))
async def commands(message: Message):
    user_id = message.from_user.id 
    user_data = {"user_id": message.from_user.id, "full_name": message.from_user.full_name, "user_name": message.from_user.full_name}
   
    async with async_session() as session:
        await add_user_data(db=session, user_data=user_data)
        await add_address(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=6, text=["üë• –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "‚õ© –ü–æ–∏—Å–∫ –∫–ª—É–±–∞", "üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã", "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º", "üåç –Ø–∑—ã–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"], callback=["team_search", "club_search", "crystals", "premium", "language", "settings"], adjust=2).keyboard()
    await message.answer("üí¨ –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
                         reply_markup=keyboard)
        
@router.callback_query(F.data == "back_to_commands")
async def back_to_commands(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=6, text=["üë• –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "‚õ© –ü–æ–∏—Å–∫ –∫–ª—É–±–∞", "üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã", "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º", "üåç –Ø–∑—ã–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"], callback=["team_search", "club_search", "crystals", "premium", "language", "settings"], adjust=2).keyboard()
    await callback.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
                         reply_markup=keyboard)


@router.callback_query(F.data == "team_search")
async def team_search(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium = await is_user_has_premium(db=session, user_id=user_id)
        await add_user_in_users_ads(db=session, user_id=user_id)

    callback_options = ["show_ads_ts", "my_ad_ts"] if is_premium else ["search_ads_ts", "my_ad_ts"]
    keyboard = CreateInlineButtons(count=2, text=["üîé –ü–æ–∏—Å–∫", "üìÑ –ú–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"], callback=callback_options, adjust=1).keyboard()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "search_ads_ts")
async def search_ads_ts(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=1, text=["üëå –•–æ—Ä–æ—à–æ"], callback=["show_ads_ts"], adjust=1).keyboard()
    await callback.message.answer("üí° –°–æ–≤–µ—Ç: \n–ü–æ–ø–∞–ª–æ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–∏–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç¬ª. –°–ø–∞—Å–∏–±–æ!",
                                  reply_markup=keyboard)
    
@router.callback_query(F.data.in_(["show_ads_ts", "continue_show_ads_ts", "continue_show_ads_ts2"]))
async def show_ads_ts(callback: CallbackQuery):
    user_id = f"{callback.from_user.id}"
    
    if user_id not in shown_ads_per_user:
        shown_ads_per_user[user_id] = set()

    async with async_session() as session:
        ad_info = await get_random_ads_ts(db=session, user_id=user_id, limit=1)

    if not ad_info:
        start_again_keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["continue_show_ads_ts2", "back_to_commands"], adjust=1).keyboard()
        await callback.message.answer("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                                      reply_markup=start_again_keyboard
        )
        shown_ads_per_user[user_id].clear()  
        return

    ad = ad_info[0]
    media = next((ad[key] for key in ["image_id_ts", "video_id_ts", "gif_id_ts"] if ad.get(key)), None)
    ad_user_id = ad["user_id"]
    user_link = f"tg://user?id={ad_user_id}"

    shown_ads_per_user[user_id].add(ad_user_id)

    keyboard = CreateInlineButtonsWithLinks(count=3, text=["üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", "‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç", "‚û°Ô∏è –î–∞–ª—å—à–µ"], url=[user_link, None, None], callback=[None, f"report_ts_{ad_user_id}", "continue_show_ads_ts"], adjust=1).keyboard()

    async with async_session() as session:
        creation_time = await read_creation_time_ts(db=session, user_id=ad_user_id)

    if creation_time:
        description = f"{ad['description_ts']} \n\nüóìÔ∏è {creation_time}"
        if ad["is_premium_user"]:
            description = f"{premium_labels[0]} \n\n{description} \n\nüóìÔ∏è {creation_time}"
    else: 
        description = f"{ad['description_ts']} \n\nüóìÔ∏è –î–∞—Ç–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        if ad["is_premium_user"]:
            description = f"{premium_labels[0]} \n\n{description} \n\nüóìÔ∏è –î–∞—Ç–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    if callback.data == "show_ads_ts":
        await callback.message.delete()

    if ad["image_id_ts"]:
        await callback.message.answer_photo(photo=media, caption=description, reply_markup=keyboard)
    elif ad["video_id_ts"]:
        await callback.message.answer_video(video=media, caption=description, reply_markup=keyboard)
    elif ad["gif_id_ts"]:
        await callback.message.answer_animation(animation=media, caption=description, reply_markup=keyboard)


@router.callback_query(F.data.startswith("report_ts_"))
async def report_ts(callback: CallbackQuery):
    reported_user_id = callback.data[10:]
    keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=[f"final_report_ts_{reported_user_id}", "continue_show_ads_ts"], adjust=1).keyboard()
    await callback.message.answer("ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ü—Ä–∏ –ª–æ–∂–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –Ω–∞–∫–∞–∑–∞–Ω—ã. ‚öñÔ∏è",
                                  reply_markup=keyboard)
    
@router.callback_query(F.data.startswith("final_report_ts_"))
async def send_report_ts(callback: CallbackQuery, bot: Bot):
    caller_user_id = callback.from_user.id 
    owner_id = 1402290759
    reported_user_id = callback.data[16:]

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=[f"continue_show_ads_ts"], adjust=1).keyboard()
    await callback.message.edit_text("‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                                     reply_markup=keyboard)

    await bot.send_message(reported_user_id, f"‚ö†Ô∏è –ù–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –ø–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å. ‚ùóÔ∏è")
    await bot.send_message(owner_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id `{caller_user_id}` –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id `{reported_user_id}`",
                                    parse_mode="MARKDOWN") 

@router.callback_query(F.data == "my_ad_ts")
async def my_ad_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium = await is_user_has_premium(db=session, user_id=user_id)
        is_ad_active = await read_status_ad_ts(db=session, user_id=user_id)
        is_cs_ad_active = await read_status_ad_cs(db=session, user_id=user_id)
        is_user_in_ban = await read_description_ts(db=session, user_id=user_id)

    if is_user_in_ban == "–ó–∞–±–∞–Ω–µ–Ω":
        keyboard = CreateInlineButtonsWithLinks(count=2, text=["üíé –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É", "‚úâÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª"], callback=["buy_unban_ts", None], url=[None, "https://t.me/bs_searcher"], adjust=1).keyboard()
        await callback.message.edit_text("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!",
                                         reply_markup=keyboard)
        return
    
    if is_ad_active == False and is_cs_ad_active == True and is_premium == False:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ. \n‚≠êÔ∏è –ò–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ¬´–ü—Ä–µ–º–∏—É–º¬ª –∫–æ—Ç–æ—Ä–∞—è –¥–ª–∏—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
                                         reply_markup=keyboard)
        return

    if is_ad_active:
        keyboard = CreateInlineButtons(count=2, text=["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üëÄ –°–∫—Ä—ã—Ç—å"], callback=["edit_ad_ts", "delete_ad_ts"], adjust=1).keyboard() 
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            reply_markup=keyboard)
        return 

    if is_premium:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_ts", "back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("üìÉ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                                              reply_markup=keyboard)
        return 

    keyboard = CreateInlineButtons(count=1, text=["üëå –û–∫"], callback=["read_rules_ts"], adjust=1).keyboard()
    await callback.message.edit_text("üìå –û—Ç–ª–∏—á–Ω–æ! –ù–æ —Å–ø–µ—Ä–≤–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
                                     reply_markup=keyboard) 
                                     
@router.callback_query(F.data == "read_rules_ts")
async def rules_ts(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=1, text=["‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è"], callback=["edit_ad_ts"], adjust=1).keyboard()
    await callback.message.edit_text("<b>–†–µ–∫–ª–∞–º–∞ ‚ùå \n\n–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ‚ùå \n\n–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ ‚ùå \n\n–ö–æ–Ω—Ç–µ–Ω—Ç 18+</b> ‚ùå \n\n–ü–æ–ø–∞–ª–æ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–∏–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç¬ª. –°–ø–∞—Å–∏–±–æ!",
                                     reply_markup=keyboard)

@router.callback_query(F.data.in_(["edit_ad_ts", "dont_add_media_ts"]))
async def creating_ad_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        image = await read_image_id_ts(db=session, user_id=user_id)
        video = await read_video_id_ts(db=session, user_id=user_id)
        gif = await read_gif_id_ts(db=session, user_id=user_id)


    if image:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_ts", "delete_ts", "done_ts"], adjust=1).keyboard()
    elif video:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ –í–∏–¥–µ–æ", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_ts", "delete_ts", "done_ts"], adjust=1).keyboard()
    elif gif:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ GIF", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_ts", "delete_ts", "done_ts"], adjust=1).keyboard()
    else:
        keyboard = CreateInlineButtons(count=1, text=["‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"], callback=["media_ts"], adjust=1).keyboard()

    if callback.data == "dont_add_media_ts":
        await callback.message.delete()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                      reply_markup=keyboard)
        return

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                                reply_markup=keyboard)       


@router.callback_query(F.data == "media_ts")
async def choose_and_send_media_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium_user = await is_user_has_premium(db=session, user_id=user_id)

    if is_premium_user:
        keyboard = CreateInlineButtons(count=3, text=["üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üé• –í–∏–¥–µ–æ", "üéûÔ∏è GIF"], callback=["get_image_ts", "get_video_ts", "get_gif_ts"], adjust=1).keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:",
                                         reply_markup=keyboard)
        return 
    
    await state.set_state(TeamSearchStates.get_image)
    await callback.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:") 


@router.callback_query(F.data == "get_image_ts")
async def send_image_ts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TeamSearchStates.get_image)

    await callback.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")

@router.callback_query(F.data == "get_video_ts")
async def send_video_ts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TeamSearchStates.get_video)

    await callback.message.edit_text("üé• –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")

@router.callback_query(F.data == "get_gif_ts")
async def send_gif_ts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TeamSearchStates.get_gif)

    await callback.message.edit_text("üéûÔ∏è –û—Ç–ø—Ä–∞–≤—å GIF, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")


@router.message(TeamSearchStates.get_image)
async def get_image_ts(message: Message, state: FSMContext):
    try:
        image_id = message.photo[-1].file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_image_ts", "dont_add_media_ts"], adjust=1).keyboard()

        await state.set_state(TeamSearchStates.set_image)
        await state.update_data(image_id=image_id)
        await message.answer_photo(photo=image_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_ts"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
                             reply_markup=keyboard)
        print(e)
    
@router.message(TeamSearchStates.get_video)
async def get_video_ts(message: Message, state: FSMContext):
    try:
        video_id = message.video.file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_video_ts", "dont_add_media_ts"], adjust=1).keyboard()

        await state.set_state(TeamSearchStates.set_video)
        await state.update_data(video_id=video_id)
        await message.answer_video(video=video_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_ts"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ!",
                             reply_markup=keyboard)
        print(e)

@router.message(TeamSearchStates.get_gif)
async def get_gif_ts(message: Message, state: FSMContext):
    try:
        gif_id = message.animation.file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_gif_ts", "dont_add_media_ts"], adjust=1).keyboard()

        await state.set_state(TeamSearchStates.set_gif)
        await state.update_data(gif_id=gif_id)
        await message.answer_animation(animation=gif_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É GIF –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_ts"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ GIF!",
                             reply_markup=keyboard)
        print(e)

@router.callback_query(TeamSearchStates.set_image)
async def set_image_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    image_id = state_data.get("image_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_image_ts(db=session, user_id=user_id, image_id=image_id)
        await delete_video_id_ts(db=session, user_id=user_id)
        await delete_gif_id_ts(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_ts"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                                     reply_markup=keyboard)


@router.callback_query(TeamSearchStates.set_video)
async def add_user_video_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    video_id = state_data.get("video_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_video_ts(db=session, user_id=user_id, video_id=video_id)
        await delete_image_id_ts(db=session, user_id=user_id)
        await delete_gif_id_ts(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_ts"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                                     reply_markup=keyboard)

@router.callback_query(TeamSearchStates.set_gif)
async def add_user_gif_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    gif_id = state_data.get("gif_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_gif_ts(db=session, user_id=user_id, gif_id=gif_id)
        await delete_image_id_ts(db=session, user_id=user_id)
        await delete_video_id_ts(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_ts"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "delete_ts")
async def delete_media_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        image = await read_image_id_ts(db=session, user_id=user_id)
        video = await read_video_id_ts(db=session, user_id=user_id)
        gif = await read_gif_id_ts(db=session, user_id=user_id)

    await callback.message.delete()

    if image: 
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_image_ts", "dont_add_media_ts"], adjust=1).keyboard()
        await callback.message.answer_photo(photo=image, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
                                            reply_markup=keyboard)
    elif video: 
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_video_ts", "dont_add_media_ts"], adjust=1).keyboard()
        await callback.message.answer_video(video=video, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ?",
                                            reply_markup=keyboard)
    elif gif:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_gif_ts", "dont_add_media_ts"], adjust=1).keyboard()
        await callback.message.answer_animation(animation=gif, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å GIF?",
                                                reply_markup=keyboard)
    else:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞!")
        
@router.callback_query(F.data.in_(["delete_image_ts", "delete_video_ts", "delete_gif_ts"]))
async def delete_media_ts_end(callback: CallbackQuery):
    user_id = callback.from_user.id 
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_ts"], adjust=1).keyboard()

    await callback.message.delete()
            
    if callback.data == "delete_image_ts":
        async with async_session() as session:
            await delete_image_id_ts(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", 
                                      reply_markup=keyboard)
    if callback.data == "delete_video_ts":
        async with async_session() as session:
            await delete_video_id_ts(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", 
                                      reply_markup=keyboard)
    if callback.data == "delete_gif_ts":
        async with async_session() as session:
            await delete_gif_id_ts(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", 
                                      reply_markup=keyboard)

@router.callback_query(F.data == "delete_ad_ts")
async def delete_ad_ts_start(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["sure_to_delete_ad_ts", "my_ad_ts"], adjust=1).keyboard()
    await callback.message.edit_text("üëÄ –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –µ–≥–æ, –Ω–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)",
                                reply_markup=keyboard)

@router.callback_query(F.data == "sure_to_delete_ad_ts")
async def delete_ad_ts_end(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        await delete_ad_in_active_ts(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ!",
                                  reply_markup=keyboard)

@router.callback_query(F.data == "done_ts")
async def done_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 

    async with async_session() as session:
        description = await read_description_ts(db=session, user_id=user_id)

    if description:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["edit_description_ts", "post_exist_ad_ts"], adjust=1).keyboard()
        await callback.message.edit_text(f"ü§î –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? \n<blockquote>{description}</blockquote>",
                                             reply_markup=keyboard)
        return

    await state.set_state(TeamSearchStates.get_description)
    await callback.message.edit_text("üí≠ –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ:")

@router.callback_query(F.data == "edit_description_ts")
async def edit_description_ts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TeamSearchStates.get_description)
    await callback.message.edit_text("üí≠ –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ:")

@router.message(TeamSearchStates.get_description)
async def get_description(message: Message, state: FSMContext):
    description = message.text

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["done_ts"], adjust=1).keyboard()
    keyboard2 = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["set_description", "done_ts"], adjust=1).keyboard()
    url_pattern = re.compile(r'http[s]?://\S+')
    mention_pattern = re.compile(r'@\w+')
    tme_pattern = re.compile(r't\.me/\w+')
    has_link = bool(url_pattern.search(description) or tme_pattern.search(description))
    has_mention = bool(mention_pattern.search(description))

    if len(description) < 20:
        await message.answer("üóØ –ò–∑–≤–∏–Ω–∏, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤",
                                reply_markup=keyboard)
        return
    if len(description) > 165: # –±—ã–ª–æ 120
        await message.answer("üóØ –ò–∑–≤–∏–Ω–∏, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –Ω–µ –±–æ–ª–µ–µ 165 —Å–∏–º–≤–æ–ª–æ–≤",
                                reply_markup=keyboard)
        return
    if checking_bad_words(text=description):
        await message.answer("üóØ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                                reply_markup=keyboard)
        return
    if has_link or has_mention:
        await message.answer("üóØ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                reply_markup=keyboard)
        return
    
    await state.set_state(TeamSearchStates.set_description)
    await state.update_data(description=description)
    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ? \n<blockquote>{description}</blockquote>",
                            reply_markup=keyboard2)

@router.callback_query(TeamSearchStates.set_description)
async def set_desc_ts(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    time = datetime.now().strftime("%d.%m.%Y")
    state_data = await state.get_data()
    description = state_data.get("description", 0) 
    #description_with_date = f"{description} \n\n{time}"

    await state.clear()
    async with async_session() as session:
        await add_creation_time_ts(db=session, user_id=user_id, time=time)
        await add_description_ts(db=session, user_id=user_id, description=description)

    keyboard = CreateInlineButtons(count=2, text=["üëç –î–∞", "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"], callback=["post_ad_ts", "my_ad_ts"], adjust=1).keyboard()
    await callback.message.edit_text("‚ÅâÔ∏è –ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤ –≤—ã–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                        reply_markup=keyboard)

@router.callback_query(F.data == "post_exist_ad_ts")
async def post_exist_ad_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 
    time = datetime.now().strftime("%d.%m.%Y")

    async with async_session() as session:
        await add_creation_time_ts(db=session, user_id=user_id, time=time)
        await add_ad_in_active_ts(db=session, user_id=user_id)
    
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö! –£–¥–∞—á–∏ üçÄ",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "post_ad_ts")
async def post_ad_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 
    async with async_session() as session:
        await add_ad_in_active_ts(db=session, user_id=user_id)
    
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö! –£–¥–∞—á–∏ üçÄ",
                                     reply_markup=keyboard)









# -------------------------------------------------------------------------------------------------------------------------------------------------------------------


@router.callback_query(F.data == "club_search")
async def club_search(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium = await is_user_has_premium(db=session, user_id=user_id)
        await add_user_in_users_ads(db=session, user_id=user_id)

    callback_options = ["show_ads_cs", "my_ad_cs"] if is_premium else ["search_ads_cs", "my_ad_cs"]
    keyboard = CreateInlineButtons(count=2, text=["üîé –ü–æ–∏—Å–∫", "üìÑ –ú–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"], callback=callback_options, adjust=1).keyboard()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "search_ads_cs")
async def search_ads_cs(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=1, text=["üëå –•–æ—Ä–æ—à–æ"], callback=["show_ads_cs"], adjust=1).keyboard()
    await callback.message.answer("üí° –°–æ–≤–µ—Ç: \n–ü–æ–ø–∞–ª–æ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–∏–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç¬ª. –°–ø–∞—Å–∏–±–æ!",
                                  reply_markup=keyboard)
    
@router.callback_query(F.data.in_(["show_ads_cs", "continue_show_ads_cs", "continue_show_ads_cs2"]))
async def show_ads_cs(callback: CallbackQuery):
    user_id = f"{callback.from_user.id}"
    
    if user_id not in shown_ads_per_user_cs:
        shown_ads_per_user_cs[user_id] = set()

    async with async_session() as session:
        ad_info = await get_random_ads_cs(db=session, user_id=user_id, limit=1)

    if not ad_info:
        start_again_keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["continue_show_ads_cs2", "back_to_commands"], adjust=1).keyboard()
        await callback.message.answer("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                                      reply_markup=start_again_keyboard
        )
        shown_ads_per_user_cs[user_id].clear()  
        return

    ad = ad_info[0]
    media = next((ad[key] for key in ["image_id_cs", "video_id_cs", "gif_id_cs"] if ad.get(key)), None)
    ad_user_id = ad["user_id"]
    user_link = f"tg://user?id={ad_user_id}"

    shown_ads_per_user_cs[user_id].add(ad_user_id)

    keyboard = CreateInlineButtonsWithLinks(count=3, text=["üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", "‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç", "‚û°Ô∏è –î–∞–ª—å—à–µ"], url=[user_link, None, None], callback=[None, f"report_cs_{ad_user_id}", "continue_show_ads_cs"], adjust=1).keyboard()

    async with async_session() as session:
        creation_time = await read_creation_time_cs(db=session, user_id=ad_user_id)

    if creation_time:
        description = f"{ad['description_cs']} \n\nüóìÔ∏è {creation_time}"
        if ad["is_premium_user"]:
            description = f"{premium_labels[0]} \n\n{description} \n\nüóìÔ∏è {creation_time}"
    else: 
        description = f"{ad['description_cs']} \n\nüóìÔ∏è –î–∞—Ç–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        if ad["is_premium_user"]:
            description = f"{premium_labels[0]} \n\n{description} \n\nüóìÔ∏è –î–∞—Ç–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    if callback.data == "show_ads_cs":
        await callback.message.delete()

    if ad["image_id_cs"]:
        await callback.message.answer_photo(photo=media, caption=description, reply_markup=keyboard)
    elif ad["video_id_cs"]:
        await callback.message.answer_video(video=media, caption=description, reply_markup=keyboard)
    elif ad["gif_id_cs"]:
        await callback.message.answer_animation(animation=media, caption=description, reply_markup=keyboard)


@router.callback_query(F.data.startswith("report_cs_"))
async def report_cs(callback: CallbackQuery):
    reported_user_id = callback.data[10:]
    keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=[f"final_report_cs_{reported_user_id}", "continue_show_ads_cs"], adjust=1).keyboard()
    await callback.message.answer("ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ü—Ä–∏ –ª–æ–∂–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –Ω–∞–∫–∞–∑–∞–Ω—ã. ‚öñÔ∏è",
                                  reply_markup=keyboard)
    
@router.callback_query(F.data.startswith("final_report_cs_"))
async def send_report_cs(callback: CallbackQuery, bot: Bot):
    caller_user_id = callback.from_user.id 
    owner_id = 1402290759
    reported_user_id = callback.data[16:]

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=[f"continue_show_ads_cs"], adjust=1).keyboard()
    await callback.message.edit_text("‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                                     reply_markup=keyboard)

    await bot.send_message(reported_user_id, f"‚ö†Ô∏è –ù–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –ø–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å. ‚ùóÔ∏è")
    await bot.send_message(owner_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id `{caller_user_id}` –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –∫–ª—É–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id `{reported_user_id}`",
                                    parse_mode="MARKDOWN") 

@router.callback_query(F.data == "my_ad_cs")
async def my_ad_cs(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium = await is_user_has_premium(db=session, user_id=user_id)
        is_ad_active = await read_status_ad_cs(db=session, user_id=user_id)
        is_ts_ad_active = await read_status_ad_ts(db=session, user_id=user_id)
        is_user_in_ban = await read_description_cs(db=session, user_id=user_id)

    if is_user_in_ban == "–ó–∞–±–∞–Ω–µ–Ω":
        keyboard = CreateInlineButtonsWithLinks(count=2, text=["üíé –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É", "‚úâÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª"], callback=["buy_unban_cs", None], url=[None, "https://t.me/bs_searcher"], adjust=1).keyboard()
        await callback.message.edit_text("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!",
                                         reply_markup=keyboard)
        return

    if is_ad_active == False and is_ts_ad_active == True and is_premium == False:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ. \n‚≠êÔ∏è –ò–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ¬´–ü—Ä–µ–º–∏—É–º¬ª –∫–æ—Ç–æ—Ä–∞—è –¥–ª–∏—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
                                         reply_markup=keyboard)
        return

    if is_ad_active:
        keyboard = CreateInlineButtons(count=2, text=["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üëÄ –°–∫—Ä—ã—Ç—å"], callback=["edit_ad_cs", "delete_ad_cs"], adjust=1).keyboard() 
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            reply_markup=keyboard)
        return 
    
    if is_premium:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_cs", "back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("üìÉ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                                              reply_markup=keyboard)
        return 
    
    keyboard = CreateInlineButtons(count=1, text=["üëå –û–∫"], callback=["read_rules_cs"], adjust=1).keyboard()
    await callback.message.edit_text("üìå –û—Ç–ª–∏—á–Ω–æ! –ù–æ —Å–ø–µ—Ä–≤–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
                                     reply_markup=keyboard) 


@router.callback_query(F.data == "read_rules_cs")
async def rules_ts(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=1, text=["‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è"], callback=["edit_ad_cs"], adjust=1).keyboard()
    await callback.message.edit_text("<b>–†–µ–∫–ª–∞–º–∞ ‚ùå \n\n–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ‚ùå \n\n–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ ‚ùå \n\n–ö–æ–Ω—Ç–µ–Ω—Ç 18+</b> ‚ùå \n\n–ü–æ–ø–∞–ª–æ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–∏–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç¬ª. –°–ø–∞—Å–∏–±–æ!",
                                     reply_markup=keyboard)

@router.callback_query(F.data.in_(["edit_ad_cs", "dont_add_media_cs"]))
async def creating_ad_cs(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        image = await read_image_id_cs(db=session, user_id=user_id)
        video = await read_video_id_cs(db=session, user_id=user_id)
        gif = await read_gif_id_cs(db=session, user_id=user_id)


    if image:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_cs", "delete_cs", "done_cs"], adjust=1).keyboard()
    elif video:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ –í–∏–¥–µ–æ", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_cs", "delete_cs", "done_cs"], adjust=1).keyboard()
    elif gif:
        keyboard = CreateInlineButtons(count=3, text=["‚úÖ GIF", "üóë –£–¥–∞–ª–∏—Ç—å", "üëå –ì–æ—Ç–æ–≤–æ"], callback=["media_cs", "delete_cs", "done_cs"], adjust=1).keyboard()
    else:
        keyboard = CreateInlineButtons(count=1, text=["‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"], callback=["media_cs"], adjust=1).keyboard()

    if callback.data == "dont_add_media_cs":
        await callback.message.delete()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                      reply_markup=keyboard)
        return

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                                reply_markup=keyboard)       


@router.callback_query(F.data == "media_cs")
async def choose_and_send_media_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium_user = await is_user_has_premium(db=session, user_id=user_id)

    if is_premium_user:
        keyboard = CreateInlineButtons(count=3, text=["üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üé• –í–∏–¥–µ–æ", "üéûÔ∏è GIF"], callback=["get_image_cs", "get_video_cs", "get_gif_cs"], adjust=1).keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:",
                                         reply_markup=keyboard)
        return 
    
    await state.set_state(ClubSearchStates.get_image)
    await callback.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:") 


@router.callback_query(F.data == "get_image_cs")
async def send_image_cs(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClubSearchStates.get_image)

    await callback.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")

@router.callback_query(F.data == "get_video_cs")
async def send_video_cs(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClubSearchStates.get_video)

    await callback.message.edit_text("üé• –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")

@router.callback_query(F.data == "get_gif_cs")
async def send_gif_cs(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClubSearchStates.get_gif)

    await callback.message.edit_text("üéûÔ∏è –û—Ç–ø—Ä–∞–≤—å GIF, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:")


@router.message(ClubSearchStates.get_image)
async def get_image_cs(message: Message, state: FSMContext):
    try:
        image_id = message.photo[-1].file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_image_cs", "dont_add_media_cs"], adjust=1).keyboard()

        await state.set_state(ClubSearchStates.set_image)
        await state.update_data(image_id=image_id)
        await message.answer_photo(photo=image_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_cs"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
                             reply_markup=keyboard)
        print(e)
    
@router.message(ClubSearchStates.get_video)
async def get_video_cs(message: Message, state: FSMContext):
    try:
        video_id = message.video.file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_video_cs", "dont_add_media_cs"], adjust=1).keyboard()

        await state.set_state(ClubSearchStates.set_video)
        await state.update_data(video_id=video_id)
        await message.answer_video(video=video_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_cs"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ!",
                             reply_markup=keyboard)
        print(e)

@router.message(ClubSearchStates.get_gif)
async def get_gif_cs(message: Message, state: FSMContext):
    try:
        gif_id = message.animation.file_id
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["set_gif_cs", "dont_add_media_cs"], adjust=1).keyboard()

        await state.set_state(ClubSearchStates.set_gif)
        await state.update_data(gif_id=gif_id)
        await message.answer_animation(animation=gif_id, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É GIF –≤ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                   reply_markup=keyboard)
    except Exception as e:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["dont_add_media_cs"], adjust=1).keyboard()
        await message.answer("–≠—Ç–æ –Ω–µ GIF!",
                             reply_markup=keyboard)
        print(e)

@router.callback_query(ClubSearchStates.set_image)
async def set_image_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    image_id = state_data.get("image_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_image_cs(db=session, user_id=user_id, image_id=image_id)
        await delete_video_id_cs(db=session, user_id=user_id)
        await delete_gif_id_cs(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_cs"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                                     reply_markup=keyboard)


@router.callback_query(ClubSearchStates.set_video)
async def add_user_video_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    video_id = state_data.get("video_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_video_cs(db=session, user_id=user_id, video_id=video_id)
        await delete_image_id_cs(db=session, user_id=user_id)
        await delete_gif_id_cs(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_cs"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                                     reply_markup=keyboard)

@router.callback_query(ClubSearchStates.set_gif)
async def add_user_gif_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    state_data = await state.get_data()
    gif_id = state_data.get("gif_id", 0)

    await state.clear()
    await callback.message.delete()

    async with async_session() as session:
        await add_gif_cs(db=session, user_id=user_id, gif_id=gif_id)
        await delete_image_id_cs(db=session, user_id=user_id)
        await delete_video_id_cs(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_cs"], adjust=1).keyboard()
    await callback.message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "delete_cs")
async def delete_media_cs(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        image = await read_image_id_cs(db=session, user_id=user_id)
        video = await read_video_id_cs(db=session, user_id=user_id)
        gif = await read_gif_id_cs(db=session, user_id=user_id)

    await callback.message.delete()

    if image: 
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_image_cs", "dont_add_media_cs"], adjust=1).keyboard()
        await callback.message.answer_photo(photo=image, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
                                            reply_markup=keyboard)
    elif video: 
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_video_cs", "dont_add_media_cs"], adjust=1).keyboard()
        await callback.message.answer_video(video=video, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ?",
                                            reply_markup=keyboard)
    elif gif:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["delete_gif_cs", "dont_add_media_cs"], adjust=1).keyboard()
        await callback.message.answer_animation(animation=gif, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å GIF?",
                                                reply_markup=keyboard)
    else:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞!")
        
@router.callback_query(F.data.in_(["delete_image_cs", "delete_video_cs", "delete_gif_cs"]))
async def delete_media_cs_end(callback: CallbackQuery):
    user_id = callback.from_user.id 
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["edit_ad_cs"], adjust=1).keyboard()

    await callback.message.delete()
            
    if callback.data == "delete_image_cs":
        async with async_session() as session:
            await delete_image_id_cs(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", 
                                      reply_markup=keyboard)
    if callback.data == "delete_video_cs":
        async with async_session() as session:
            await delete_video_id_cs(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", 
                                      reply_markup=keyboard)
    if callback.data == "delete_gif_cs":
        async with async_session() as session:
            await delete_gif_id_cs(db=session, user_id=user_id)
        await callback.message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", 
                                      reply_markup=keyboard)

@router.callback_query(F.data == "delete_ad_cs")
async def delete_ad_cs_start(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["sure_to_delete_ad_cs", "my_ad_cs"], adjust=1).keyboard()
    await callback.message.edit_text("üëÄ –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –µ–≥–æ, –Ω–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)",
                                reply_markup=keyboard)

@router.callback_query(F.data == "sure_to_delete_ad_cs")
async def delete_ad_ts_end(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        await delete_ad_in_active_cs(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ!",
                                  reply_markup=keyboard)

@router.callback_query(F.data == "done_cs")
async def done_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 

    async with async_session() as session:
        description = await read_description_cs(db=session, user_id=user_id)

    if description:
        keyboard = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], callback=["edit_description_cs", "post_exist_ad_cs"], adjust=1).keyboard()
        await callback.message.edit_text(f"ü§î –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? \n<blockquote>{description}</blockquote>",
                                             reply_markup=keyboard)
        return

    await state.set_state(ClubSearchStates.get_description)
    await callback.message.edit_text("üí≠ –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ:")

@router.callback_query(F.data == "edit_description_cs")
async def edit_description_cs(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClubSearchStates.get_description)
    await callback.message.edit_text("üí≠ –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ:")

@router.message(ClubSearchStates.get_description)
async def get_description_cs(message: Message, state: FSMContext):
    description = message.text

    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["done_cs"], adjust=1).keyboard()
    keyboard2 = CreateInlineButtons(count=2, text=["‚úÖ –î–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["set_description_cs", "done_cs"], adjust=1).keyboard()
    url_pattern = re.compile(r'http[s]?://\S+')
    mention_pattern = re.compile(r'@\w+')
    tme_pattern = re.compile(r't\.me/\w+')
    has_link = bool(url_pattern.search(description) or tme_pattern.search(description))
    has_mention = bool(mention_pattern.search(description))

    if len(description) < 20:
        await message.answer("üóØ –ò–∑–≤–∏–Ω–∏, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤",
                                reply_markup=keyboard)
        return
    if len(description) > 195: # –±—ã–ª–æ 120
        await message.answer("üóØ –ò–∑–≤–∏–Ω–∏, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –Ω–µ –±–æ–ª–µ–µ 195 —Å–∏–º–≤–æ–ª–æ–≤",
                                reply_markup=keyboard)
        return
    if checking_bad_words(text=description):
        await message.answer("üóØ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                                reply_markup=keyboard)
        return
    if has_link or has_mention:
        await message.answer("üóØ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                reply_markup=keyboard)
        return
    
    await state.set_state(ClubSearchStates.set_description)
    await state.update_data(description=description)
    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ? \n<blockquote>{description}</blockquote>",
                            reply_markup=keyboard2)

@router.callback_query(ClubSearchStates.set_description)
async def set_desc_cs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    time = datetime.now().strftime("%d.%m.%Y")
    state_data = await state.get_data()
    description = state_data.get("description", 0)
    #description_with_date = f"{description} \n\n{time}"

    await state.clear()
    async with async_session() as session:
        await add_creation_time_cs(db=session, user_id=user_id, time=time)
        await add_description_cs(db=session, user_id=user_id, description=description)

    keyboard = CreateInlineButtons(count=2, text=["üëç –î–∞", "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"], callback=["post_ad_cs", "my_ad_cs"], adjust=1).keyboard()
    await callback.message.edit_text("‚ÅâÔ∏è –ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤ –≤—ã–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                        reply_markup=keyboard)

@router.callback_query(F.data == "post_exist_ad_cs")
async def post_exist_ad_ts(callback: CallbackQuery):
    user_id = callback.from_user.id 
    time = datetime.now().strftime("%d.%m.%Y")

    async with async_session() as session:
        await add_creation_time_cs(db=session, user_id=user_id, time=time)
        await add_ad_in_active_cs(db=session, user_id=user_id)
    
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö! –£–¥–∞—á–∏ üçÄ",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "post_ad_cs")
async def post_ad_cs(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        await add_ad_in_active_cs(db=session, user_id=user_id)
    
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö! –£–¥–∞—á–∏ üçÄ",
                                     reply_markup=keyboard)




# -----------------------------------------------------------------------------------------




@router.callback_query(F.data == "crystals")
async def crystals(callback: CallbackQuery):
    user_id = callback.from_user.id 
    async with async_session() as session:
        crystals_count = await read_crystals_count(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=3, text=["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å"], callback=["top_up", "send", "receive"], adjust=1).keyboard()
    await callback.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç")
    await callback.message.edit_text(f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ {crystals_count} üíé \n–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—é:", 
                                    reply_markup=keyboard)

@router.callback_query(F.data == "top_up")
async def top_up(callback: CallbackQuery):
    await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

@router.callback_query(F.data == "send")
async def send(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SendCrystalsStates.chosen_way)
    keyboard = CreateInlineButtons(count=2, text=["–ü–æ —é–∑–µ—Ä–Ω–µ–π–º—É", "–ü–æ –∞–¥—Ä–µ—Å—É"], callback=["by username", "by address"], adjust=1).keyboard()
    await callback.message.edit_text("üîë –ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã?", 
                                    reply_markup=keyboard)

@router.callback_query(SendCrystalsStates.chosen_way)
async def enter_username_or_address(callback: CallbackQuery, state: FSMContext):
    chosen_way = callback.data
    await state.set_state(SendCrystalsStates.enter_crystals_count)
    await state.update_data(chosen_way=chosen_way)

    if chosen_way == "by username":
        await callback.message.edit_text("–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –±–µ–∑ @:")
    if chosen_way == "by address":
        await callback.message.edit_text("–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

@router.message(SendCrystalsStates.enter_crystals_count)
async def enter_crystals_count(message: Message, state: FSMContext):
    user_id = message.from_user.id 
    state_data = await state.get_data()
    chosen_way = state_data.get("chosen_way", 0)

    async with async_session() as session:
        crystals_count = await read_crystals_count(db=session, user_id=user_id)

    if chosen_way == "by username":
        entered_username = message.text 
        async with async_session() as session:
            username = await read_username(db=session, username=entered_username)
        if username:
            await state.update_data(username=username)

            if crystals_count <= 0:
                await message.answer(f"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! \n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {crystals_count} üíé")
            else:
                await state.set_state(SendCrystalsStates.confirmation)
                await message.answer(f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ {crystals_count} üíé \n–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º @{username}:")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    if chosen_way == "by address":
        entered_address = message.text 
        async with async_session() as session:
            address = await read_address(db=session, address=entered_address)
        if address:
            await state.update_data(address=address)
            if crystals_count <= 0:
                await message.answer(f"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! \n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {crystals_count} üíé")
            else:
                await state.set_state(SendCrystalsStates.confirmation)
                await message.answer(f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ {crystals_count} üíé \n–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å: \n`{address}`",
                                        parse_mode="MARKDOWN")
        else: 
            await message.answer("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")



@router.message(SendCrystalsStates.confirmation)
async def send_confirmation(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id 
        crystals_being_sent = float(message.text)
        state_data = await state.get_data()
        chosen_way = state_data.get("chosen_way", 0)
        await state.update_data(crystals=crystals_being_sent)

        async with async_session() as session:
            current_crystals_count = await read_crystals_count(db=session, user_id=user_id)

        if chosen_way == "by username":
            username = state_data.get("username", 0)
            username_or_address = f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}"
        if chosen_way == "by address":
            address = state_data.get("address", 0)
            username_or_address = f"–ê–¥—Ä–µ—Å: \n`{address}`"

        if crystals_being_sent <= 0:
            keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ –º–µ–Ω–µ–µ 1 –∫—Ä–∏—Å—Ç–∞–ª–ª–∞.",
                                 reply_markup=keyboard)
        else:
            keyboard = CreateInlineButtons(count=1, text=["‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å"], callback=["confirm sending"], adjust=1).keyboard()
            await state.set_state(SendCrystalsStates.opperation_end)
            await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –∫–æ–ª-–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {crystals_being_sent} üíé \n–ë–∞–ª–∞–Ω—Å: {current_crystals_count} üíé \n{username_or_address}", 
                                    reply_markup=keyboard, parse_mode="MARKDOWN")
    except Exception as e:
        print(e)
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!",
                             reply_markup=keyboard)

@router.callback_query(SendCrystalsStates.opperation_end)
async def opperartion_end(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id 
    caller_username = callback.from_user.username
    state_data = await state.get_data()
    chosen_way = state_data.get("chosen_way", 0)
    address = state_data.get("address", 0)
    crystals = state_data.get("crystals", 0)

    async with async_session() as session: 
        await crystals_substraction(db=session, user_id=user_id, deductible_crystals=crystals)
        balance = await read_crystals_count(db=session, user_id=user_id)

    if chosen_way == "by username":
        username = state_data.get("username", 0)
        async with async_session() as session:
            await crediting_crystals_to_user_by_username(db=session, username=username, crystals=crystals)
            recipient_id = await get_id_by_username(db=session, username=username)
            recipient_lang = await read_user_language(db=session, user_id=recipient_id)

        if caller_username:
            await bot.send_message(recipient_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{caller_username} –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {crystals} üíé")
        else:
            await bot.send_message(recipient_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {crystals} üíé")

    if chosen_way == "by address":
        address = state_data.get("address", 0)
        async with async_session() as session:
            await crediting_crystals_to_user_by_address(db=session, address=address, crystals=crystals)
            recipient_id = await get_id_by_address(db=session, address=address)
            recipient_lang = await read_user_language(db=session, user_id=recipient_id)

        await callback.message.edit_text(f"{crystals} üíé –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: \n`{address}` \n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} üíé",
                                            parse_mode="MARKDOWN")

        if caller_username:
            await bot.send_message(recipient_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{caller_username} –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {crystals} üíé")
        else:
            await bot.send_message(recipient_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {crystals} üíé")

    await state.clear()


@router.callback_query(F.data == "receive")
async def receive(callback: CallbackQuery):
    user_id = callback.from_user.id 
    username = callback.from_user.username

    async with async_session() as session:
        address = await read_address_by_user_id(db=session, user_id=user_id)


    if username is None: 
        await callback.message.edit_text(f"–í–∞—à –∞–¥—Ä–µ—Å: \n`{address}`",
                                            parse_mode="MARKDOWN")
    else: 
        await callback.message.edit_text(f"–í–∞—à –∞–¥—Ä–µ—Å: \n`{address}` \n\n–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: @{username}",
                                            parse_mode="MARKDOWN")


@router.callback_query(F.data == "premium")
async def premium(callback: CallbackQuery):
    user_id = callback.from_user.id 

    async with async_session() as session:
        is_premium = await is_user_has_premium(db=session, user_id=user_id)

    if is_premium:
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("‚≠êÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –µ–π –ø–æ –ø–æ–ª–Ω–æ–π! üç≠",
                                         reply_markup=keyboard)
        return 
    keyboard = CreateInlineButtons(count=3, text=["üõí –ö—É–ø–∏—Ç—å", "üìä –ß—Ç–æ —è –ø–æ–ª—É—á—É?", "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["buy_premium", "premium_benefits", "back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("üç≠ –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –ø–æ –ø–æ–ª–Ω–æ–π –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π!",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "buy_premium")
async def buy_premium(callback: CallbackQuery):
    try:
        invoice = await crypto_client.create_invoice(asset="USDT", amount=2.5)
        invoice_url = invoice.bot_invoice_url    
        invoice_id = invoice.invoice_id

        keyboard = CreateInlineButtonsWithLinks(count=2, text=["üí∏ –û–ø–ª–∞—Ç–∏—Ç—å 2.5 USDT", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"], callback=[None, f"check_{invoice_id}"], url=[invoice_url, None], adjust=1).keyboard()
        old_photo = "AgACAgIAAxkBAAIHNGc-QnzUWz-muXcn-AjjmXB2bR9RAAJq6TEbqHvxSdVSzQitiBQzAQADAgADeAADNgQ"
        await callback.message.delete()
        new_photo = "AgACAgIAAxkBAAIfP2dHCPiEYu8_sK2XPat5UYks5YNMAAKh8TEbyR4xSgf-RMIznEVlAQADAgADeQADNgQ"
        await callback.message.answer_photo(photo=new_photo,
                                            caption="–í–∞—à —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É 2.5 USDT –≥–æ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:", reply_markup=keyboard)
        #await callback.message.answer("–í–∞—à —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É 2.5 USDT –≥–æ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:", reply_markup=keyboard)

    except Exception as e:
        print(e)
        keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["back_to_commands"], adjust=1).keyboard()
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞!",
                                         reply_markup=keyboard)

@router.callback_query(F.data.startswith("check_"))
async def check_invoice(callback: CallbackQuery):
    user_id = callback.from_user.id
    invoice_id = callback.data[6:]

    try:
        invoices = await crypto_client.get_invoices(invoice_ids=invoice_id)
        for invoice in invoices:
            if invoice.status == "paid":
                async with async_session() as session:
                    await add_user_premium(db=session, user_id=user_id)
                await callback.message.delete()
                await callback.message.answer("üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ ‚≠êÔ∏è")
            else:
                await callback.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç!")
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data == "premium_benefits")
async def premium_benefits(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=2, text=["üõí –ö—É–ø–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"], callback=["buy_premium", "back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text(premium_benefits_var,
                                     reply_markup=keyboard)

@router.callback_query(F.data == "language")
async def language(callback: CallbackQuery):
    await callback.answer("üîú –°–∫–æ—Ä–æ...")


@router.callback_query(F.data == "settings")
async def settings(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=8, text=["üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", "üî¢ –ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "üîú –°–∫–æ—Ä–æ", "üîú –°–∫–æ—Ä–æ", "üîú –°–∫–æ—Ä–æ", "üîú –°–∫–æ—Ä–æ", "üîú –°–∫–æ—Ä–æ", "üîú –°–∫–æ—Ä–æ"], callback=["share_bot", "ads_count", "soon", "soon", "soon", "soon", "soon", "soon"], adjust=2).keyboard()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:",
                                     reply_markup=keyboard)

@router.callback_query(F.data == "share_bot")
async def share_bot(callback: CallbackQuery):
    photo = "AgACAgIAAxkBAAIfRWdHCdzf9FHysugduHXwVxJHKljzAAKg8TEbyR4xSjGXUpPDBTtdAQADAgADeQADNgQ"
    await callback.message.delete()
    await callback.message.answer_photo(photo=photo, caption="–ü—Ä–∏–≤–µ—Ç! üéâ –ù–∞—à—ë–ª –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–∏–º–º–µ–π—Ç–æ–≤, –¥—Ä—É–∑–µ–π –∏ –¥–∞–∂–µ —Ü–µ–ª—ã–µ –∫–ª—É–±—ã! üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å —á–∞—Å—Ç—å—é —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ! üòâ")
    await callback.message.answer("P.S –ü–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –∑–Ω–∞–∫–æ–º—ã–º –∏ —Ç–µ–º –∫–æ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ. –°–ø–∞—Å–∏–±–æ! üíñ")

@router.callback_query(F.data == "ads_count")
async def call_ads_count(callback: CallbackQuery, state: FSMContext):
    #await callback.answer("–°–∫–æ—Ä–æ...")
    await state.set_state(GetAdsCount.get_count)
    keyboard = CreateInlineButtons(count=2, text=["üë• –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "‚õ© –ü–æ–∏—Å–∫ –∫–ª—É–±–∞"], callback=["view_ads_count_ts", "view_ads_count_cs"], adjust=1).keyboard()
    await callback.message.edit_text("–í –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π?",
                                     reply_markup=keyboard)
    
    
@router.callback_query(GetAdsCount.get_count)
async def send_ads_count_cs(callback: CallbackQuery):
    where = callback.data
    keyboard = CreateInlineButtons(count=1, text=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["ads_count"], adjust=1).keyboard()

    async with async_session() as session:
        ts_ads_count = await read_ads_count_ts(db=session)
        cs_ads_count = await read_ads_count_cs(db=session)

    if where == "view_ads_count_ts":
        await callback.message.edit_text(f"üïí –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è <b>{ts_ads_count}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. üìÑ",
                                        reply_markup=keyboard)
        return

    if where == "view_ads_count_cs":
        await callback.message.edit_text(f"üïí –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è <b>{cs_ads_count}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. üìÑ",
                                            reply_markup=keyboard)
        return

@router.callback_query(F.data == "soon")
async def soon(callback: CallbackQuery):
    await callback.answer("–°–∫–æ—Ä–æ...")

@router.message(Command("admin_panel"))
async def admin_panel(message: Message):
    user_id = message.from_user.id 

    if str(user_id) == "1402290759":
        keyboard = CreateInlineButtons(count=6, text=["üî¢ –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîä –†–∞—Å—Å—ã–ª–∫–∞", "–°–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ user_id"], callback=["users count", "broadcast", "hide_ad_admin", "ban_user_admin", "unban_user_admin", "get_ad_by_user_id"], adjust=2).keyboard()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", 
                                reply_markup=keyboard)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")

@router.callback_query(F.data == "users count")
async def show_users_count(callback: CallbackQuery): 
    async with async_session() as session:
        users_count = await read_users_count(db=session)

    time = datetime.now().strftime("%H:%M %d.%m.%Y")
    await callback.message.edit_text(f"–ù–∞ –º–æ–º–µ–Ω—Ç {time}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç {users_count}!")


@router.callback_query(F.data == "broadcast")
async def broadcast(callback: CallbackQuery):
    keyboard = CreateInlineButtons(count=4, text=["üìù –¢–µ–∫—Å—Ç", "üñº –§–æ—Ç–æ", "üìπ –í–∏–¥–µ–æ", "‚úâÔ∏è –ì–∏—Ñ"], callback=["text broadcast", "photo broadcast", "video broadcast", "gif broadcast"], adjust=2).keyboard()
    await callback.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
                        reply_markup=keyboard)

@router.callback_query(F.data == "text broadcast")
async def text_broadcast_enter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Broadcast.start_text_broadcast)
    await callback.message.delete()
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç:")

@router.message(Broadcast.start_text_broadcast)
async def start_text_broadcast(message: Message, state: FSMContext, bot: Bot):
    text = message.text
    await state.clear()
    async with async_session() as session:
        users_id = await read_all_users(db=session)
        await broadcast_message_only_text(message=text, users=users_id, bot=bot)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@router.callback_query(F.data == "photo broadcast")
async def photo_broadcast_enter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Broadcast.start_photo_broadcast)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:")

@router.message(Broadcast.start_photo_broadcast)
async def start_photo_broadcast(message: Message, state: FSMContext, bot: Bot):
    photo_id = message.photo[-1].file_id
    caption = message.caption
    await state.clear()
    async with async_session() as session:
        users_id = await read_all_users(db=session)
        await broadcast_message_with_photo(photo_id=photo_id, caption=caption, users=users_id, bot=bot)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@router.callback_query(F.data == "video broadcast")
async def video_broadcast_enter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Broadcast.start_video_broadcast)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:")

@router.message(Broadcast.start_video_broadcast)
async def start_video_broadcast(message: Message, state: FSMContext, bot: Bot):
    video_id = message.video.file_id
    caption = message.caption
    await state.clear()
    async with async_session() as session:
        users_id = await read_all_users(db=session)
        await broadcast_message_with_video(video_id=video_id, caption=caption, users=users_id, bot=bot)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@router.callback_query(F.data == "gif broadcast")
async def gif_broadcast_enter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Broadcast.start_gif_broadcast)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–∏—Ñ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:")

@router.message(Broadcast.start_gif_broadcast)
async def start_video_broadcast(message: Message, state: FSMContext, bot: Bot):
    gif_id = message.animation.file_id
    caption = message.caption
    await state.clear()
    async with async_session() as session:
        users_id = await read_all_users(db=session)
        await broadcast_message_with_gif(gif_id=gif_id, caption=caption, users=users_id, bot=bot)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@router.callback_query(F.data == "hide_ad_admin")
async def hide_ad(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminPanel.get_user_id_hide_ad)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@router.message(AdminPanel.get_user_id_hide_ad)
async def get_user_id_hide_ad(message: Message, state: FSMContext):
    user_id = message.text
    keyboard = CreateInlineButtons(count=2, text=["–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "–ü–æ–∏—Å–∫ –∫–ª—É–±–∞"], callback=[f"admin_hide_ad_ts_{user_id}", f"admin_hide_ad_cs_{user_id}"], adjust=1).keyboard()
    await state.clear()
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è?",
                                     reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_hide_ad_ts_"))
async def admin_hide_ad_ts(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[17:]
    async with async_session() as session:
            await delete_ad_in_active_ts(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –±—ã–ª–æ —Å–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ.")

@router.callback_query(F.data.startswith("admin_hide_ad_cs_"))
async def admin_hide_ad_cs(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[17:]
    async with async_session() as session:
            await delete_ad_in_active_cs(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –±—ã–ª–æ —Å–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ.")

@router.callback_query(F.data == "ban_user_admin")
async def ban_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminPanel.get_user_id_ban)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@router.message(AdminPanel.get_user_id_ban)
async def get_user_id_ban_ad(message: Message, state: FSMContext):
    user_id = message.text
    keyboard = CreateInlineButtons(count=2, text=["–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "–ü–æ–∏—Å–∫ –∫–ª—É–±–∞"], callback=[f"admin_ban_ad_ts_{user_id}", f"admin_ban_ad_cs_{user_id}"], adjust=1).keyboard()
    await state.clear()
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è?",
                                     reply_markup=keyboard)
    
@router.callback_query(F.data.startswith("admin_ban_ad_ts_"))
async def admin_ban_ad_ts(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[16:]
    async with async_session() as session:
            await ban_ad_ts(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ö—É–ø–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤ –Ω–∞—à–µ–º <a href='https://t.me/bs_searcher'>–∫–∞–Ω–∞–ª–µ</a>")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data.startswith("admin_ban_ad_cs_"))
async def admin_ban_ad_ts(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[16:]
    async with async_session() as session:
            await ban_ad_ts(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ö—É–ø–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤ –Ω–∞—à–µ–º <a href='https://t.me/bs_searcher'>–∫–∞–Ω–∞–ª–µ</a>")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.")


@router.callback_query(F.data == "unban_user_admin")
async def unban_user_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminPanel.get_user_id_unban)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@router.message(AdminPanel.get_user_id_unban)
async def get_user_id_unban_ad(message: Message, state: FSMContext):
    user_id = message.text
    keyboard = CreateInlineButtons(count=2, text=["–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "–ü–æ–∏—Å–∫ –∫–ª—É–±–∞"], callback=[f"admin_unban_ad_ts_{user_id}", f"admin_unban_ad_cs_{user_id}"], adjust=1).keyboard()
    await state.clear()
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å?",
                                     reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_unban_ad_ts_"))
async def admin_unban_ad_ts(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[18:]
    async with async_session() as session:
            await unban_ad_ts(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –±—ã–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ü—Ä–æ—Å–∏–º –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞.")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data.startswith("admin_unban_ad_cs_"))
async def admin_unban_ad_cs(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[18:]
    async with async_session() as session:
            await unban_ad_cs(db=session, user_id=user_id)

    await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –±—ã–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n–ü—Ä–æ—Å–∏–º –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞.")
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data == "get_ad_by_user_id")
async def get_ad_by_user_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminPanel.get_ad_by_user_id)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@router.message(AdminPanel.get_ad_by_user_id)
async def get_ad_by_user_id_start(message: Message, state: FSMContext):
    user_id = message.text
    keyboard = CreateInlineButtons(count=2, text=["–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã", "–ü–æ–∏—Å–∫ –∫–ª—É–±–∞"], callback=[f"admin_get_ad_ts_{user_id}", f"admin_get_ad_cs_{user_id}"], adjust=1).keyboard()
    await state.clear()
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
                                     reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_get_ad_ts_"))
async def admin_get_ad_ts(callback: CallbackQuery):
    user_id = callback.data[16:]
    async with async_session() as session:
            ad_info = await read_ad_ts_by_user_id(db=session, user_id=user_id)

    image = ad_info["image"]
    video = ad_info["video"]
    gif = ad_info["gif"] 

    if image: 
        await callback.message.answer_photo(photo=image, caption=ad_info["description"])
    if video: 
        await callback.message.answer_video(video=video, caption=ad_info["description"])
    if gif: 
        await callback.message.answer_animation(animation=gif, caption=ad_info["description"])

@router.callback_query(F.data.startswith("admin_get_ad_cs_"))
async def admin_get_ad_cs(callback: CallbackQuery, bot: Bot):
    user_id = callback.data[16:]
    async with async_session() as session:
            ad_info = await read_ad_cs_by_user_id(db=session, user_id=user_id)

    image = ad_info["image"]
    video = ad_info["video"]
    gif = ad_info["gif"] 

    if image: 
        await callback.message.answer_photo(photo=image, caption=ad_info["description"])
    if video: 
        await callback.message.answer_video(video=video, caption=ad_info["description"])
    if gif: 
        await callback.message.answer_animation(animation=gif, caption=ad_info["description"])

@router.callback_query(F.data.startswith("buy_unban_"))
async def buy_unban(callback: CallbackQuery):
    where_ban = callback.data[10:]

    if where_ban == "ts":
        keyboard = CreateInlineButtons(count=2, text=["üõí –ö—É–ø–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["buy_unban_by_crystals_ts", "my_ad_ts"], adjust=1).keyboard()
        await callback.message.edit_text("–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã¬ª –∑–∞ 150 üíé",
                                         reply_markup=keyboard)
        return 
    if where_ban == "cs":
        keyboard = CreateInlineButtons(count=2, text=["üõí –ö—É–ø–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["buy_unban_by_crystals_cs", "my_ad_ts"], adjust=1).keyboard()
        await callback.message.edit_text("–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–∏—Å–∫ –∫–ª—É–±–∞¬ª –∑–∞ 150 üíé",
                                         reply_markup=keyboard)
        return 
    
@router.callback_query(F.data.startswith("buy_unban_by_crystals_"))
async def buy_unban_end(callback: CallbackQuery):
    user_id = callback.from_user.id 
    where_ban = callback.data[22:]

    async with async_session() as session:
        crystals_count = await read_crystals_count(db=session, user_id=user_id)

    if crystals_count < 150:
        keyboard = CreateInlineButtons(count=2, text=["üõí –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], callback=["top up", "back_to_commands"], adjust=1).keyboard()
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!",
                                         reply_markup=keyboard)
        return

    async with async_session() as session:
        await crystals_substraction(db=session, user_id=user_id, deductible_crystals=150)

    if where_ban == "ts":
        async with async_session() as session:
            await unban_ad_ts(db=session, user_id=user_id)
    if where_ban == "cs":
        async with async_session() as session:
            await unban_ad_cs(db=session, user_id=user_id)

    keyboard = CreateInlineButtons(count=1, text=["–ù–∞–∑–∞–¥"], callback=["back_to_commands"], adjust=1).keyboard()
    await callback.message.edit_text("–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! \n–ü—Ä–æ—Å–∏–º –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞.")